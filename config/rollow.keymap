// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_36keys.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define XXX &none
#define TODO XXX
#define ___ &trans

#define BASE 0
#define NUM 1
#define SYM 2
#define UTIL 3

#define S_UNDO &kp C_AC_UNDO
#define S_CUT &kp C_AC_CUT
#define S_COPY &kp C_AC_COPY
#define S_PASTE &kp C_AC_PASTE
#define S_REDO &kp C_AC_REDO

// TODO:
// - Encoders:
//   - scroll operation
//   - button press
// - OLED
// - Numlock
//   - Tapdance
//   - Combo
//   - Fn key undoes numlock
// - Caps word
// - Split up config into files
// - Fix sticky keys for cadding (use the wrapping around behavior)
// - Layer features
//   - Repeat key
//   - Fn num layer
//   - Alt tab
// - Add num+fn+left hand BT switcher


/ {
    chosen {
        zmk,matrix_transform = &five_column_transform;
    };

    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            quick-release;
            release-after-ms = <60000>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        util_layer {
            if-layers = <NUM SYM>;
            then-layer = <UTIL>;
        };
    };

    macros {
        // when the momentary layer is held or tapped, cancel any pending OS mods
        // workaround for https://github.com/zmkfirmware/zmk/issues/834
        mo_sym: mo_sym {
            label = "MO_SYM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &kp F24>
                , <&macro_press &mo SYM>
                , <&macro_pause_for_release>
                , <&macro_release &mo SYM>
                ;
        };
        mo_num: mo_num {
            label = "MO_NUM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &kp F24>
                , <&macro_press &mo NUM>
                , <&macro_pause_for_release>
                , <&macro_release &mo NUM>
                ;
        };
    };
    
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp B   &kp L   &kp D   &kp W    &kp Z        &kp APOS   &kp F    &kp O      &kp U     &kp J 
            &kp N   &kp R   &kp T   &kp S    &kp G        &kp Y      &kp H    &kp A      &kp E     &kp I 
            &kp Q   &kp X   &kp M   &kp C    &kp V        &kp K      &kp P    &kp COMMA  &kp DOT   &kp FSLH 
                            XXX     &mo_num  &skq LSHIFT  &kp SPACE  &mo_sym  XXX >;
        };
        num_layer {
            bindings = <
            TODO      &kp HASH  &kp DLLR   &kp PRCNT &kp CARET   &kp PLUS   &kp N7  &kp N8  &kp N9  &kp ASTRK 
            &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT &kp LGUI    &kp N3     &kp N0  &kp N1  &kp N2  &kp EQUAL 
            S_UNDO    S_CUT     S_COPY     S_PASTE   S_REDO      &kp MINUS  &kp N4  &kp N5  &kp N6  &kp FSLH 
                                XXX        &mo NUM   &kp SPACE   TODO       &mo SYM XXX >;
        };
        sym_layer {
            bindings = <
            &kp TILDE  &kp PIPE  &kp UNDER  &kp LBKT  &kp RBKT   &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &kp ESC 
            &kp GRAVE  &kp AMPS  &kp AT     &kp LPAR  &kp RPAR   &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &kp ENTER 
            &kp BSLH   &kp LT    &kp GT     &kp LBRC  &kp RBRC   TODO      &kp BSPC   &kp DEL    &kp TAB    &kp CAPS 
                                 XXX        &mo NUM   ___        ___       &mo SYM    XXX >;
        };
 
        util_layer {
            bindings = <
            TODO      &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP  &bootloader &kp HOME  &kp PG_DN  &kp PG_UP   &kp END    &kp ESC 
            &sk LGUI  &sk LALT   &sk LCTRL    &sk LSHFT     &kp LGUI    &kp LEFT  &kp DOWN   &kp UP      &kp RIGHT  &kp ENTER 
            S_UNDO    S_CUT      S_COPY       S_PASTE       S_REDO      TODO      &kp BSPC   &kp DEL     &kp TAB    &kp CAPS 
                                 XXX          ___           ___         ___       ___        XXX >;
        };
    };
    
// ╭─────────────────────┬─────────────────────╮
// │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
// │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
// │ LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 │
// ╰───────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────╯
//         ╰─────────────┴─────────────╯
    combos {
        compatible = "zmk,combos";
        
        #define COMBO(name, keypos, combo_bindings, combo_timeout) \
            combo_##name { \
                key-positions = <keypos>; \
                bindings = <combo_bindings>; \
                timeout-ms = <combo_timeout>; \
            }; 

        #define COMBO_LAYER(name, keypos, combo_bindings, combo_timeout, combo_layer) \
            combo_##name { \
                key-positions = <keypos>; \
                bindings = <combo_bindings>; \
                timeout-ms = <combo_timeout>; \
                layers = <combo_layer>; \
            }; 

        #define BASE_COMBO(name, keypos, bindings) COMBO(name, keypos, bindings, 30)
        BASE_COMBO(esc, LT3 LT2, &kp ESC)
        BASE_COMBO(tab, LT2 LT1, &kp TAB)
        BASE_COMBO(ent, LB3 LB2, &kp ENTER)
        // BASE_COMBO(rep, LB2 LB1, &kp REP)
        BASE_COMBO(bksp, RB1 RB2, &kp BSPC)
        BASE_COMBO(del, RB2 RB3, &kp DEL)
        // BASE_COMBO(numl, RB3 RB4, NUML)
        
        #define NUM_COMBO(name, keypos, bindings) COMBO_LAYER(name, keypos, bindings, 30, NUM)
        NUM_COMBO(lpar, RT1 RT2, &kp LPAR)
        NUM_COMBO(rpar, RT2 RT3, &kp RPAR)
        NUM_COMBO(dot, RM1 RM2, &kp DOT)

        #define THUMB_COMBO(thumb, keypos, combo_bindings, combo_layers) \
            combo_thumb_##thumb##_##keypos { \
                key-positions = <thumb keypos>; \
                bindings = <combo_bindings>; \
                timeout-ms = <THUMB_COMBO_TIMEOUT>; \
                partial-holds = <thumb>; \
                layers = <combo_layers>; \
            };

        #undef THUMB_COMBO_TIMEOUT
        #define THUMB_COMBO_TIMEOUT 30
        #define SYM_THUMB_COMBO(keypos, bindings) THUMB_COMBO(RH1, keypos, bindings, BASE)
        SYM_THUMB_COMBO(RT0, &kp HOME)
        SYM_THUMB_COMBO(RT1, &kp PG_DN)
        SYM_THUMB_COMBO(RT2, &kp PG_UP)
        SYM_THUMB_COMBO(RT3, &kp END)
        SYM_THUMB_COMBO(RT4, &kp ESC)
        SYM_THUMB_COMBO(RM0, &kp LEFT)
        SYM_THUMB_COMBO(RM1, &kp DOWN)
        SYM_THUMB_COMBO(RM2, &kp UP)
        SYM_THUMB_COMBO(RM3, &kp RIGHT)
        SYM_THUMB_COMBO(RM4, &kp ENTER)
        // SYM_THUMB_COMBO(RB0, &kp REP) 
        SYM_THUMB_COMBO(RB1, &kp BSPC)
        SYM_THUMB_COMBO(RB2, &kp DEL)
        SYM_THUMB_COMBO(RB3, &kp TAB)
        // SYM_THUMB_COMBO(RB4, &kp CAPS)
        
        #undef THUMB_COMBO_TIMEOUT
        #define THUMB_COMBO_TIMEOUT 60
        SYM_THUMB_COMBO(LT4, &kp TILDE)
        SYM_THUMB_COMBO(LT3, &kp PIPE)
        SYM_THUMB_COMBO(LT2, &kp UNDER)
        SYM_THUMB_COMBO(LT1, &kp LBKT)
        SYM_THUMB_COMBO(LT0, &kp RBKT)
        SYM_THUMB_COMBO(LM4, &kp GRAVE)
        SYM_THUMB_COMBO(LM3, &kp AMPS)
        SYM_THUMB_COMBO(LM2, &kp AT)
        SYM_THUMB_COMBO(LM1, &kp LPAR)
        SYM_THUMB_COMBO(LM0, &kp RPAR)
        SYM_THUMB_COMBO(LB4, &kp BSLH)
        SYM_THUMB_COMBO(LB3, &kp LT)
        SYM_THUMB_COMBO(LB2, &kp GT)
        SYM_THUMB_COMBO(LB1, &kp LBRC)
        SYM_THUMB_COMBO(LB0, &kp RBRC)
        
        #undef THUMB_COMBO_TIMEOUT
        #define THUMB_COMBO_TIMEOUT 30
        #define NUM_THUMB_COMBO(keypos, bindings) THUMB_COMBO(LH1, keypos, bindings, BASE)
        // NUM_THUMB_COMBO(LT4, &kp ATAB)
        NUM_THUMB_COMBO(LT3, &kp HASH)
        NUM_THUMB_COMBO(LT2, &kp DLLR)
        NUM_THUMB_COMBO(LT1, &kp PRCNT)
        NUM_THUMB_COMBO(LT0, &kp CARET)
        NUM_THUMB_COMBO(LM4, &sk LGUI)
        NUM_THUMB_COMBO(LM3, &sk LALT)
        NUM_THUMB_COMBO(LM2, &sk LCTRL)
        NUM_THUMB_COMBO(LM1, &sk LSHFT)
        NUM_THUMB_COMBO(LM0, &kp LGUI)
        NUM_THUMB_COMBO(LB4, S_UNDO)
        NUM_THUMB_COMBO(LB3, S_CUT)
        NUM_THUMB_COMBO(LB2, S_COPY)
        NUM_THUMB_COMBO(LB1, S_PASTE)
        NUM_THUMB_COMBO(LB0, S_REDO)
        
        #undef THUMB_COMBO_TIMEOUT
        #define THUMB_COMBO_TIMEOUT 60
        NUM_THUMB_COMBO(RT0, &kp PLUS)
        NUM_THUMB_COMBO(RT1, &kp N7)
        NUM_THUMB_COMBO(RT2, &kp N8)
        NUM_THUMB_COMBO(RT3, &kp N9)
        NUM_THUMB_COMBO(RT4, &kp ASTRK)
        NUM_THUMB_COMBO(RM0, &kp N0)
        NUM_THUMB_COMBO(RM1, &kp N1)
        NUM_THUMB_COMBO(RM2, &kp N2)
        NUM_THUMB_COMBO(RM3, &kp N3)
        NUM_THUMB_COMBO(RM4, &kp EQUAL)
        NUM_THUMB_COMBO(RB0, &kp MINUS)
        NUM_THUMB_COMBO(RB1, &kp N4)
        NUM_THUMB_COMBO(RB2, &kp N5)
        NUM_THUMB_COMBO(RB3, &kp N6)
        NUM_THUMB_COMBO(RB4, &kp SLASH)
    };
    
    
};
