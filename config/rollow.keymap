// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define XXX &none
#define TODO XXX
#define ___ &trans

#define BASE 0
#define NUM 1
#define SYM 2
#define UTIL 3

#define SK(KEY) &nk KEY KEY
#define MO(LAYER) &mo_tap LAYER F24

#define S_UNDO &kp LC(Z)
#define S_CUT &kp LC(X)
#define S_COPY &kp LC(C)
#define S_PASTE &kp LC(V)
#define S_REDO &kp LC(Y)

// Keep sticky keys active for a long time so they effectively do not time out
#define STICKY_KEY_TIMEOUT 60000

/ {
    behaviors {
        nk: not_so_sticky_key {
            compatible = "zmk,behavior-hold-tap";
            label = "NOT_SO_STICKY_KEY";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            quick-release;
            release-after-ms = <STICKY_KEY_TIMEOUT>;
        };
        // A hold-tap that activates without delay (like `&mo`)
        mo_tap: mo_with_tap {
          compatible = "zmk,behavior-hold-tap";
          label = "MO_WITH_TAP";
          #binding-cells = <2>;
          tapping_term_ms = <0>;
          retro-tap;
          flavor = "hold-preferred";
          bindings = <&mo>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        util_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
    
    // TODO:
    // - Encoders:
    //   - scroll operation
    //   - button press
    // - OLED
    // - Numlock
    //   - Tapdance
    //   - Combo
    //   - Fn key undoes numlock
    // - Combos
    //   - action keys?
    //   - speed up modifiers
    // - Caps word
    // - Improved shortcut commands
    // - Split up config into files
    // - Switch to nodefree config
    // - Fix sticky keys for cadding (use the wrapping around behavior)
    // - Layer features
    //   - Repeat key
    //   - Fn num layer
    //   - Alt tab
    // - Figure out where to put in symbol/util layer empty space (caps? caps word?)
    // - Add num+fn+left hand BT switcher
    

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp B   &kp L   &kp D   &kp W    &kp Z        &kp QUOTE  &kp F    &kp O      &kp U     &kp J 
            &kp N   &kp R   &kp T   &kp S    &kp G        &kp Y      &kp H    &kp A      &kp E     &kp I 
            &kp Q   &kp X   &kp M   &kp C    &kp B        &kp K      &kp P    &kp COMMA  &kp DOT   &kp FSLH 
                            XXX     MO(NUM)  &kp LSHIFT  &skq SPACE  MO(SYM)  XXX
            >;
        };

        num_layer {
            bindings = <
            TODO      &kp HASH  &kp DLLR   &kp PRCNT &kp CARET   &kp PLUS   &kp N7  &kp N8  &kp N9  &kp ASTRK 
            SK(LGUI)  SK(LALT)  SK(LCTRL)  SK(LSHFT) &kp LGUI    &kp N3     &kp N0  &kp N1  &kp N2  &kp EQUAL 
            S_UNDO    S_CUT     S_COPY     S_PASTE   S_REDO      &kp MINUS  &kp N4  &kp N5  &kp N6  &kp FSLH 
                                           XXX       ___         ___        TODO    ___     XXX
            >;
        };
        sym_layer {
            bindings = <
            &kp GRAVE  &kp AMPS   &kp PIPE  &kp LBKT  &kp RBKT   &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &kp ESC 
            &kp BSLH   &kp COLON  &kp EXCL  &kp LPAR  &kp RPAR   &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &kp DEL 
            &kp TILDE  &kp SEMI   &kp AT    &kp LBRC  &kp RBRC   TODO      &kp BSPC   &kp TAB    &kp XXX    &kp ENTER 
                                            XXX       ___        ___       ___        ___        XXX
            >;
        };

        util_layer {
            bindings = <
            TODO      &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP  &reset     &kp HOME  &kp PG_DN  &kp PG_UP   &kp END    &kp ESC 
            SK(LGUI)  SK(LALT)  SK(LCTRL)     SK(LSHFT)     &kp LGUI   &kp LEFT  &kp DOWN   &kp UP      &kp RIGHT  &kp DEL 
            S_UNDO    S_CUT     S_COPY        S_PASTE       S_REDO     ___       &kp BSPC   &kp TAB     ___        &kp ENTER 
                                              XXX           ___        ___       ___        ___         XXX
            >;
        };
    };
};
